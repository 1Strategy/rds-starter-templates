#  Copyright 2018 1Strategy, LLC

#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at

#        http://www.apache.org/licenses/LICENSE-2.0

#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'This template allows to provision RDS instances securely by creating
an encrypted SSM parameter to store the RDS instance password. The password is randomly generated using a lambda function.'


Parameters:
  AllocatedStorage:
    Description: The allocated storage size, specified in gigabytes (GB).
    Type: String
    AllowedPattern: "^([2-9]?[0-9]{1}|[0-9]{3,4}|1[0-5]?[0-9]{3}|16[0-2]?[0-9]{2}|163[0-7]?[0-9]{1}|1638[0-4]?)$"
    ConstraintDescription: "Value must be a valid number between 20-16384."
  
  AllowMajorVersionUpgrade:
    Description: If you update the EngineVersion property to a version that's different from the DB instance's current major version, set this property to true.
    Type: String
    AllowedValues: [true, false]
    ConstraintDescription: "Value must be boolean value."

  AutoMinorVersionUpgrade:
    Description: Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window. The default value is true.
    Type: String
    AllowedValues: [true, false]
    Default: true
    ConstraintDescription: "Value must be boolean value."
  
  BackupRetentionPeriod:
    Description: The number of days during which automatic DB snapshots are retained.
    Type: String
    AllowedPattern: "^[0-9]{1,3}$"
    ConstraintDescription: "Value must be a valid number between 0-999."

  DBInstanceClass:
    Description: The name of the compute and memory capacity classes of the DB instance.
    Type: String
    Default: db.t2.medium
    
  DBName:
    Description: The name of the DB instance that was provided at the time of creation, if one was specified. This same name is returned for the life of the DB instance.
    Type: String
  
  # Engine:
  #   Description: The name of the database engine to be used for this instance.
  #   Type: String
  #   AllowedValues: [mysql, mariadb, postgres]
  #   ConstraintDescription: "Please specify either a mysql, mariadb, or postgres engine for the RDS instance."

  DBSubnetGroupName:
    Description: A DB subnet group to associate with the DB instance. 
    Type: String
  
  VPCSecurityGroups:
    Description: Specifies if the database instance is a multiple Availability Zone deployment.
    Type: String
    ConstraintDescription: "Please provide valid ids for the security group(s)."

  MasterUsername:
    Description: The master user name for the DB instance.
    Type: String

  MultiAZ:
    Description: Specifies if the database instance is a multiple Availability Zone deployment.
    Type: String
    AllowedValues: [true, false]
    Default: true
    ConstraintDescription: "Value must be boolean value."

  SSMParameterName:
    Description: Parameter name under which to store the master password for the RDS instace. 
    Type: String
    Default: RDSMasterPassword
  
  IAMRoleName:
    Description: IAM Role Name that Lambda functions will be assuming
    Type: String
    Default: RDS-Starter-Template-LambdaExecutionRole

  IAMManagedPolicyName:
    Description: Name of the IAM policy that allows users to decrypt SSM RDS Master password parameter. 
    Type: String


Resources:
  # MySQLRDSInstance:
  #   Type: "AWS::CloudFormation::Stack"
  #   Properties:
  #     Parameters:
  #           AllocatedStorage: !Ref AllocatedStorage
  #           AllowMajorVersionUpgrade: !Ref AllowMajorVersionUpgrade
  #           AutoMinorVersionUpgrade: !Ref AutoMinorVersionUpgrade
  #           BackupRetentionPeriod: !Ref BackupRetentionPeriod
  #           DBInstanceClass: !Ref DBInstanceClass
  #           DBName: !Ref DBName
  #           Engine: mysql
  #           DBSubnetGroupName: !Ref DBSubnetGroupName
  #           VPCSecurityGroups: !Ref VPCSecurityGroups
  #           MasterUsername: !Ref MasterUsername
  #           MasterUserPassword: !GetAtt InvokeGetPasswordLambda.Data
  #           MultiAZ: !Ref MultiAZ
          
  #     TemplateURL: https://s3-us-west-2.amazonaws.com/pavelyarema-public/opensource-rds-instance.yml
  #     #TimeoutInMinutes will fail the stack creation if this nested stack is not completed in the amount of minutes specified.
  #     TimeoutInMinutes: 20 
  
  # MariadbRDSInstance:
  #   Type: "AWS::CloudFormation::Stack"
  #   Properties:
  #     Parameters:
  #           AllocatedStorage: !Ref AllocatedStorage
  #           AllowMajorVersionUpgrade: !Ref AllowMajorVersionUpgrade
  #           AutoMinorVersionUpgrade: !Ref AutoMinorVersionUpgrade
  #           BackupRetentionPeriod: !Ref BackupRetentionPeriod
  #           DBInstanceClass: !Ref DBInstanceClass
  #           DBName: "MariaDB"  
  #           Engine: mariadb
  #           DBSubnetGroupName: !Ref DBSubnetGroupName
  #           VPCSecurityGroups: !Ref VPCSecurityGroups
  #           MasterUsername: !Ref MasterUsername
  #           MasterUserPassword: !GetAtt InvokeGetPasswordLambda.Data
  #           MultiAZ: !Ref MultiAZ
          
  #     TemplateURL: https://s3-us-west-2.amazonaws.com/pavelyarema-public/rds-instance.yml
  #     #TimeoutInMinutes will fail the stack creation if this nested stack is not completed in the amount of minutes specified.
  #     TimeoutInMinutes: 20 
  
  # PostgresRDSInstance:
  #   Type: "AWS::CloudFormation::Stack"
  #   Properties:
  #     Parameters:
  #           AllocatedStorage: !Ref AllocatedStorage
  #           AllowMajorVersionUpgrade: !Ref AllowMajorVersionUpgrade
  #           AutoMinorVersionUpgrade: !Ref AutoMinorVersionUpgrade
  #           BackupRetentionPeriod: !Ref BackupRetentionPeriod
  #           DBInstanceClass: !Ref DBInstanceClass
  #           DBName: "PostgresDB"  
  #           Engine: postgres
  #           DBSubnetGroupName: !Ref DBSubnetGroupName
  #           VPCSecurityGroups: !Ref VPCSecurityGroups
  #           MasterUsername: !Ref MasterUsername
  #           MasterUserPassword: !GetAtt InvokeGetPasswordLambda.Data
  #           MultiAZ: !Ref MultiAZ
          
  #     TemplateURL: https://s3-us-west-2.amazonaws.com/pavelyarema-public/rds-instance.yml
  #     #TimeoutInMinutes will fail the stack creation if this nested stack is not completed in the amount of minutes specified.
  #     TimeoutInMinutes: 20 
  SSMParameter:
    Type: "AWS::SSM::Parameter"
    Properties: 
      Name: !Ref SSMParameterName 
      Description: String
      Type: String
      Value: "TempValue"

  
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: "/"
      Policies: 
        - 
          PolicyName: "SSM-Master-Password-Parameter-Access"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: 
                  - ssm:GetParameters
                  - ssm:GetParameter
                  - ssm:PutParameter
                Resource: !Join ["", ["arn:aws:ssm:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":","parameter/", !Ref SSMParameterName]]
      RoleName: !Ref IAMRoleName

  RDSMasterKeyUsagePolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties: 
      PolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - 
            Sid: "AllowUseOfKey"
            Effect: "Allow"
            Action: 
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
            Resource: !GetAtt EncryptionKey.Arn

      ManagedPolicyName: !Ref IAMManagedPolicyName
      Roles: 
        - !Ref LambdaExecutionRole

  GeneratePasswordLambda:
    Type: "AWS::Lambda::Function"
    Properties: 
      Code:
        ZipFile: |
          import json
          import cfnresponse
          import random
          import boto3
          import logging
          import traceback
          from time import sleep

          def passwordgenerator():
            try:
              s = "abcdefghijklmnopqrstuvwxyz01234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%^&*()?"
              passlen = 25
              p =  "".join(random.sample(s,passlen ))
              print ("Password Successfully Generated")
              return p
            
            except Exception as e:
              raise
            
            

          def write2ssm(parameter_name, value, key):
            try:
              client = boto3.client('ssm')
            
              print ("Writing password to parameter specified.")
              response = client.put_parameter(
                Name= parameter_name,
                Value= value,
                Type='SecureString',
                KeyId= key,
                Overwrite=True,
                AllowedPattern="^[^\\/\"@]{8,}$"
                )
            except Exception as e:
              raise

          def handler(event, context):
            try:
              parameterName = (event['ResourceProperties']['ParameterName'])
              keyId = (event['ResourceProperties']['KeyID'])
              # Generate password
              password = passwordgenerator()
              
              sleep(45) # Waiting 45 seconds to ensure IAM Permissions were properly propagated. 
    
              # Write password to SSM 
              write2ssm(parameterName, password, keyId)
              
              responseData = {}
              
              responseData['Data'] = "Success"
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID")

            except Exception as e:
              logging.error(traceback.format_exc())
              responseData = {}
              responseData['Error'] = "Lambda Function was unable to successfully generate a password and place it in a SSM parameter"
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData, "CustomResourcePhysicalID")
              raise

      Description: Lambda Function that will generate random passwords
      FunctionName: GeneratePasswordLambda
      Handler: index.handler
      MemorySize: 128 #Minimum allowed vlaue. No reason for this lambda function to use more than 128MB.
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.6
      Timeout: 65
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}-${Name}
            - { Name: GeneratePasswordLambda }
    DependsOn: SSMParameter

  GetPasswordLambda:
    Type: "AWS::Lambda::Function"
    Properties: 
      Code:
        ZipFile: |
          import json
          import boto3
          import logging
          import traceback
          from botocore.vendored import requests

          SUCCESS = "SUCCESS"
          FAILED = "FAILED"

          def getssmparameter(parameter_name):
            try:
              client = boto3.client('ssm')
              
              print ("Getting password from parameter specified.")
              response = client.get_parameter(
              Name= parameter_name,
              WithDecryption=True
              )
              
              return response
            
            except Exception as e:
              raise

          def handler(event, context):
            try:
              parameterName = (event['ResourceProperties']['ParameterName'])
              
              # Get password from SSM 
              response = getssmparameter(parameterName)
              
            
              responseData = {}
              
              responseData['Data'] = response['Parameter']['Value']
              send(event, context, SUCCESS, responseData, "CustomResourcePhysicalID",noEcho=True) #Need to remove sensitive data from logs

            except Exception as e:
              logging.error(traceback.format_exc())
              responseData = {}
              responseData['Error'] = "Lambda Function was unable to successfully retrieve the password from the SSM parameter"
              send(event, context, FAILED, responseData, "CustomResourcePhysicalID")
              raise


          def send(event, context, responseStatus, responseData, physicalResourceId=None, noEcho=False):
              responseUrl = event['ResponseURL']

              print(responseUrl)

              responseBody = {}
              responseBody['Status'] = responseStatus
              responseBody['Reason'] = 'See the details in CloudWatch Log Stream: ' + context.log_stream_name
              responseBody['PhysicalResourceId'] = physicalResourceId or context.log_stream_name
              responseBody['StackId'] = event['StackId']
              responseBody['RequestId'] = event['RequestId']
              responseBody['LogicalResourceId'] = event['LogicalResourceId']
              responseBody['NoEcho'] = noEcho
              responseBody['Data'] = responseData

              json_responseBody = json.dumps(responseBody)

              # print("Response body:\n" + json_responseBody)

              headers = {
                  'content-type' : '',
                  'content-length' : str(len(json_responseBody))
              }

              try:
                  response = requests.put(responseUrl,
                                          data=json_responseBody,
                                          headers=headers)
                  print("Status code - " + response.reason)
              except Exception as e:
                  print("send(..) failed executing requests.put(..) -" + str(e))

      Description: Lambda Function that will retrieve password from encrypted SSM parameter.
      FunctionName: GetPasswordLambda
      Handler: index.handler
      MemorySize: 128 #Minimum allowed vlaue. No reason for this lambda function to use more than 128MB.
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.6
      Timeout: 10
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}-${Name}
            - { Name: GetPasswordLambda }

  EncryptionKey:
    Type: "AWS::KMS::Key"
    Properties: 
      Description: KMS Key to encrypt SSM Parameter that include RDS master passwords. 
      Enabled: true
      KeyPolicy: 
        Version: "2012-10-17"
        Id: "key-default-1"
        Statement: 
          - 
            Sid: "Enable IAM User Permissions"
            Effect: "Allow"
            Principal: 
              AWS:
                !Join ["", [ "arn:aws:iam::", !Ref "AWS::AccountId", ":root"]]
            Action: 
              - "kms:*"
            Resource: "*"
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}-${Name}
            - { Name: SSM-KMS-KEY }
      
  EncryptionKeyAlias:
    Type: "AWS::KMS::Alias"
    Properties:
      AliasName: alias/RDSMasterKey
      TargetKeyId: !Ref EncryptionKey

  InvokeGeneratePasswordLambda:
    Type: AWS::CloudFormation::CustomResource
    DeletionPolicy: Retain
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt GeneratePasswordLambda.Arn
      ParameterName: 
        Ref: SSMParameterName
      KeyID:
        Ref: EncryptionKey
    DependsOn: EncryptionKey

  InvokeGetPasswordLambda:
    Type: AWS::CloudFormation::CustomResource
    DeletionPolicy: Retain
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt GetPasswordLambda.Arn
      ParameterName: 
        Ref: SSMParameterName
    DependsOn: InvokeGeneratePasswordLambda




#Outputs:



