#  Copyright 2018 1Strategy, LLC

#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at

#        http://www.apache.org/licenses/LICENSE-2.0

#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'This template allows to provision RDS instances securely by creating
an encrypted SSM parameter to store the RDS instance password. The password is randomly generated using a lambda function.'


Parameters:

  AllowMajorVersionUpgrade:
    Description: If you update the EngineVersion property to a version that's different from the DB instance's current major version, set this property to true.
    Type: String
    AllowedValues: [true, false]
    ConstraintDescription: "Value must be boolean value."

  AutoMinorVersionUpgrade:
    Description: Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window. The default value is true.
    Type: String
    AllowedValues: [true, false]
    Default: true
    ConstraintDescription: "Value must be boolean value."
  
  BackupRetentionPeriod:
    Description: The number of days during which automatic DB snapshots are retained.
    Type: String
    AllowedPattern: "^[0-9]{1,3}$"
    ConstraintDescription: "Value must be a valid number between 0-999."

  DBInstanceClass:
    Description: The name of the compute and memory capacity classes of the DB instance.
    Type: String
    Default: db.t2.medium
    
  DBName:
    Description: The name of the database inside the instance.
    Type: String

  DBClusterIdentifier:
    Description: Name of the database cluster.
    Type: String
    AllowedPattern: "^[([a-z]|\\d|\\-)]{1,63}$"
    ConstraintDescription: "DBClusterIdentifier can only contain lowercase letters, numbers, and/or hypen."
  
  Engine:
    Description: The name of the database engine to be used for this instance.
    Type: String
    AllowedValues: [aurora, aurora-mysql, aurora-postgresql]
    ConstraintDescription: "Please specify either a aurora, aurora-mysql, aurora-postgresql engine for the RDS instance."

  DBSubnetGroupName:
    Description: A DB subnet group to associate with the DB instance. 
    Type: String
  
  VPCSecurityGroups:
    Description: Specifies if the database instance is a multiple Availability Zone deployment.
    Type: String
    ConstraintDescription: "Please provide valid ids for the security group(s)."

  MasterUsername:
    Description: The master user name for the DB instance.
    Type: String

  SSMParameterName:
    Description: Parameter name under which to store the master password for the RDS instace. 
    Type: String
    Default: RDSMasterPassword
  
  IAMRoleName:
    Description: Name of the IAM Role that should be used when creating the IAM Role that Lambda functions will be assuming
    Type: String
    Default: RDS-Starter-Template-LambdaExecutionRole

  IAMManagedPolicyName:
    Description: Name of the IAM policy that will be created that allows users to decrypt SSM RDS Master password parameter. 
    Type: String


Resources:
  RDSInstance:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
            AllowMajorVersionUpgrade: !Ref AllowMajorVersionUpgrade
            AutoMinorVersionUpgrade: !Ref AutoMinorVersionUpgrade
            BackupRetentionPeriod: !Ref BackupRetentionPeriod
            DBInstanceClass: !Ref DBInstanceClass
            DBName: !Ref DBName
            DBClusterIdentifier: !Ref DBClusterIdentifier
            Engine: !Ref Engine
            DBSubnetGroupName: !Ref DBSubnetGroupName
            VPCSecurityGroups: !Ref VPCSecurityGroups
            MasterUsername: !Ref MasterUsername
            MasterUserPassword: !GetAtt InvokeGetPasswordLambda.Data
          
      TemplateURL: ./aurora-rds-instance.yml
      #TimeoutInMinutes will fail the stack creation if this nested stack is not completed in the amount of minutes specified.
      TimeoutInMinutes: 45
    DependsOn: InvokeGeneratePasswordLambda 
  
  SSMParameter:
    Type: "AWS::SSM::Parameter"
    Properties: 
      Name: !Ref SSMParameterName 
      Description: String
      Type: String
      Value: "TempValue"

  
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: "/"
      Policies: 
        - 
          PolicyName: "SSM-Master-Password-Parameter-Access"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: 
                  - ssm:GetParameters
                  - ssm:GetParameter
                  - ssm:PutParameter
                Resource: !Join ["", ["arn:aws:ssm:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":","parameter/", !Ref SSMParameterName]]
      RoleName: !Ref IAMRoleName

  RDSMasterKeyUsagePolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties: 
      PolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - 
            Sid: "AllowUseOfKey"
            Effect: "Allow"
            Action: 
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
            Resource: !GetAtt EncryptionKey.Arn

      ManagedPolicyName: !Ref IAMManagedPolicyName
      Roles: 
        - !Ref LambdaExecutionRole

  GeneratePasswordLambda:
    Type: AWS::Serverless::Function
    Properties: 
      Description: Lambda Function that will generate random passwords
      FunctionName: GeneratePasswordLambda
      CodeUri: .
      Handler: generate-password-lambda.handler
      MemorySize: 128 #Minimum allowed vlaue. No reason for this lambda function to use more than 128MB.
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.6
      Timeout: 65
    DependsOn: SSMParameter

  GetPasswordLambda:
    Type: AWS::Serverless::Function
    Properties: 
      Description: Lambda Function that will retrieve password from encrypted SSM parameter.
      FunctionName: GetPasswordLambda
      CodeUri: .
      Handler: get-password-lambda.handler
      MemorySize: 128 #Minimum allowed vlaue. No reason for this lambda function to use more than 128MB.
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.6
      Timeout: 10

  EncryptionKey:
    Type: "AWS::KMS::Key"
    Properties: 
      Description: KMS Key to encrypt SSM Parameter that include RDS master passwords. 
      Enabled: true
      KeyPolicy: 
        Version: "2012-10-17"
        Id: "key-default-1"
        Statement: 
          - 
            Sid: "Enable IAM User Permissions"
            Effect: "Allow"
            Principal: 
              AWS:
                !Join ["", [ "arn:aws:iam::", !Ref "AWS::AccountId", ":root"]]
            Action: 
              - "kms:*"
            Resource: "*"
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}-${Name}
            - { Name: SSM-KMS-KEY }
      
  EncryptionKeyAlias:
    Type: "AWS::KMS::Alias"
    Properties:
      AliasName: alias/RDSMasterKey
      TargetKeyId: !Ref EncryptionKey

  InvokeGeneratePasswordLambda:
    Type: AWS::CloudFormation::CustomResource
    DeletionPolicy: Retain
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt GeneratePasswordLambda.Arn
      ParameterName: 
        Ref: SSMParameterName
      KeyID:
        Ref: EncryptionKey
    DependsOn: EncryptionKey

  InvokeGetPasswordLambda:
    Type: AWS::CloudFormation::CustomResource
    DeletionPolicy: Retain
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt GetPasswordLambda.Arn
      ParameterName: 
        Ref: SSMParameterName
    DependsOn: InvokeGeneratePasswordLambda




#Outputs:



